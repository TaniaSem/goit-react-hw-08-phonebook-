{"version":3,"file":"static/js/228.3a093b00.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Section/Section.styled.js","components/Section/Section.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\nexport const getIsContactExist = state => Boolean(state.contacts.items.length);\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 400px;\n  padding: 20px;\n  border: 1px solid #064927;\n  border-radius: 4px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  font-size: 16px;\n  padding: 5px 15px;\n  border: 1px solid #2c7953;\n  border-radius: 4px;\n`;\n\nexport const SubmitBtn = styled.button`\n  display: block;\n  width: 200px;\n  margin-top: 10px;\n  padding: 5px;\n  border: 1px solid #2c7953;\n  border-radius: 4px;\n  cursor: pointer;\n\n  color: #064927;\n  background-color: #fff;\n  font-size: 16px;\n  font-weight: 500;\n\n  :hover {\n    font-weight: 600;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { FormStyled, Label, Input, SubmitBtn } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [contactName, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setPhone(value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts\n        .map(({ name }) => name.toLocaleLowerCase())\n        .some(name => name === contactName.toLocaleLowerCase())\n    ) {\n      return alert(`${contactName} is already in contacts`);\n    }\n    const contact = {\n      contactName,\n      phone,\n    };\n    dispatch(addContact(contact));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <FormStyled autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Label htmlFor=\"name\">\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={contactName}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          required\n        />\n      </Label>\n      <Label htmlFor=\"number\">\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={phone}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={handleChange}\n          required\n        />\n      </Label>\n      <SubmitBtn type=\"submit\">Add contact</SubmitBtn>\n    </FormStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 350px;\n  margin: 0;\n  padding: 20px;\n  list-style: circle;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nexport const ItemText = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const BtnDelete = styled.button`\n  display: block;\n  width: 100px;\n  height: 30px;\n  padding: 5px;\n  border: 1px solid #2c7953;\n  border-radius: 4px;\n  cursor: pointer;\n\n  color: #064927;\n  background-color: #fff;\n  font-size: 16px;\n  font-weight: 500;\n\n  :hover {\n    font-weight: 600;\n  }\n`;\n","// import { ContactElement } from 'components/ContactElement/ContactElement';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { deleteContact } from 'redux/operations';\n// import { selectVisibleContacts } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { BtnDelete, ItemText, List, ListItem } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const deleteContactById = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, phone }) => (\n        <ListItem key={id}>\n          <ItemText>\n            {name}: {phone}\n          </ItemText>\n          <BtnDelete onClick={() => deleteContactById(id)} disabled={isLoading}>\n            Delete\n          </BtnDelete>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 300px;\n`;\n\nexport const FilterLabel = styled.label`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const FilterInput = styled.input`\n  font-size: 16px;\n  padding: 5px 15px;\n  border: 1px solid #2c7953;\n  border-radius: 4px;\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/contactsSlice';\nimport { FilterBox, FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const [filterValue, setFilterValue] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    e.preventDefault();\n    setFilterValue(e.target.value);\n    dispatch(filterContacts(e.target.value));\n  };\n  return (\n    <FilterBox>\n      <FilterLabel htmlFor=\"filter\">Find contact by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        id=\"filter\"\n        value={filterValue}\n        onChange={handleFilterChange}\n      />\n    </FilterBox>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SectionPart = styled.section`\n  color: #064927;\n  padding: 20px 0;\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 30px 0;\n`;\n","import { SectionPart, Title } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionPart>\n      <Title>{title}</Title>\n      {children}\n    </SectionPart>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  /* width: 100vh;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 30px;\n  padding: 40px; */\n  display: flex;\n  gap: 50px;\n  padding: 30px;\n  /* background-color: #d8edc5a3; */\n  /* box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px; */\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Section } from 'components/Section/Section';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsContactExist } from 'redux/contacts/selectors';\nimport { Box } from './Contacts.styled';\n\nconst Contacts = () => {\n  const contacts = useSelector(getIsContactExist);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        {contacts && <ContactList />}\n      </Section>\n    </Box>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","getIsContactExist","Boolean","length","selectVisibleContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","FormStyled","styled","Label","Input","SubmitBtn","ContactForm","useSelector","dispatch","useDispatch","useState","contactName","setName","phone","setPhone","handleChange","e","target","value","autoComplete","onSubmit","preventDefault","map","toLocaleLowerCase","some","alert","addContact","htmlFor","type","pattern","title","onChange","required","List","ListItem","ItemText","BtnDelete","ContactList","visibleContacts","id","onClick","contactId","deleteContact","disabled","FilterBox","FilterLabel","FilterInput","Filter","filterValue","setFilterValue","filterContacts","SectionPart","Title","Section","children","Box","useEffect","fetchContacts"],"sourceRoot":""}